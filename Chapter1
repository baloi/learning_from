Sun Oct 22 12:59:33 EDT 2017
START

Chapter 1 - Learning from urlget with sideline of CppUTest

$ git clone git@github.com:baloi/learning_from.git

Open ~/tinker/curl_evolution/1_url_get_3.12/url_get.c

$ vim learn_urlget.c
$ ls
Chapter1
learn_urlget.c
README.md


First find a network read-write function:

In static int sendf() function, swrite() is call.

$ mkdir urlget
$ cp ~/tinker/curl_evolution/1_url_get3.12/*.c urlget
$ cp ~/tinker/curl_evolution/1_url_get3.12/*.h urlget
$ grep -n "swrite" urlget/*

urlget/config.h:76:#define swrite(x,y,z) (size_t)send(x,y,z,0)
urlget/config.h:80:#define swrite(x,y,z) write(x,y,z)
urlget/urlget.c:534:      if(nread != swrite(sockfd, buf, nread)) {
urlget/urlget.c:1323:  return(swrite(fd, s, strlen(s)));

> As we can see, urlget/config.h:80
  "#define swrite(x,y,z) (size_t)send(x,y,z,0)"
  This is what we are looking for.
  swrite(x,y,z) is just a call to send(x,y,z,0)

  swrite() is used in:
  static int sendf(int fd, struct UrlData *data, char *fmt, ...)

  I am going to use a simpler sendf()...

  And also implement struct UrlData: 

--- code start ---
/*   Example: learn_urlget -p 8080 -x my-proxy.my.site http://www.from.here 
 */
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <string.h>


#define LEAST_SIZE_PROGRESS BUFSIZE
#define BUFSIZE (2048 * 5)

/* config struct */
struct UrlData {
    FILE *out;  // the fetched file goes here
    FILE *in;   // the uploaded file is read from here
    char *url;  // what to get
    unsigned short port;  // which port to use

    // function that stores the output
    size_t (*fwrite) (char *buffer,
                      int size,
                      int nitems,
                      FILE *outstream);
    // function that reads the input
    size_t (*fread)(char *buffer,
                    int size,
                    int nitems,
                    FILE *outstream);
    long timeout;  // in seconds, 0 means no timeout
    // fields only set and used without _urlget()
    int firstsocket;    // the main socket to use
    int secondarysocket;// for i.e ftp transfers
    char buffer[BUFSIZE+1];
};

#include <stdio.h>

/* sendf() sends the str to the server */
static int sendf(int fd, struct UrlData *data, char *str) {
    char s[1024];

    return (send(fd, s, strlen(s), 0));
}

int main(int argc, char **argv) {
    char *str = "hello there";
    int ret = sendf(fd, data, str);      
    return 0;
}
--- code end ---

> That was a lot of setting up...

$ cc learn_urlget.c

learn_urlget.c: In function 'main':
learn_urlget.c:47:21: error: 'fd' undeclared (first use in this function)
     int ret = sendf(fd, data, str);
                     ^~
learn_urlget.c:47:21: note: each undeclared identifier is reported only once for each function it appears in
learn_urlget.c:47:25: error: 'data' undeclared (first use in this function)
     int ret = sendf(fd, data, str);
                         ^~~~

Sun Oct 22 13:42:00 EDT 2017
END

Sun Oct 22 13:50:22 EDT 2017
START

> Now, where is UrlData used...
  Doing "/UrlData" in vim eventually shows in urlget() as:
  
  struct UrlData * data;
  So let's use that in main:

--- code start ---
int main(int argc, char **argv) {
    char *str = "hello there";
    struct UrlData *data;
    data = malloc(sizeof(struct UrlData));
    int ret = sendf(fd, data, str);
    return 0;
}
--- code end ---

$ cc learn_urlget.c

learn_urlget.c: In function 'main':
learn_urlget.c:48:12: warning: implicit declaration of function 'malloc' [-Wimplicit-function-declaration]
     data = malloc(sizeof(struct UrlData));
            ^~~~~~
learn_urlget.c:48:12: warning: incompatible implicit declaration of built-in function 'malloc'
learn_urlget.c:48:12: note: include '<stdlib.h>' or provide a declaration of 'malloc'
learn_urlget.c:49:21: error: 'fd' undeclared (first use in this function)
     int ret = sendf(fd, data, str);
                     ^~
learn_urlget.c:49:21: note: each undeclared identifier is reported only once for each function it appears in

> Need stdlib.h for malloc() and then got to work on "fd"...
  So add this line on top of code:

#include <stdlib.h>

> and then let's deal with "data" (struct UrlData *):

   data = malloc(sizeof(struct UrlData));
   if (data) {
        data->out = stdout;
        data->in = stdin;
        data->firstsocket = -1; // no file descriptor
        // use fwrite as default function to store output
        data->fwrite = (size_t (*)(char *, int, int, FILE *))fwrite;
   }

> Notice that man fwrite gets:
  size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);

  And in this piece of code, we are casting fwrite to
  (size_t (*)(char *, int, int, FILE *))

  data->fwrite = (size_t (*)(char *, int, int, FILE *))fwrite;

> Taking a break. Now at urlget() function in urlget.c

Sun Oct 22 14:10:32 EDT 2017
END

Sun Oct 22 19:57:40 EDT 2017
START

Back to urlget()

        data->fread = (size_t (*)(char *, int, int, FILE *))fread;

(had dinner already)
Sun Oct 22 21:05:02 EDT 2017
END


Sun Oct 22 20:58:09 EDT 2017
START

> after a bit of tinkering....
  This code compiles but gets "Could not connect to server":

  Maybe I should also make a test....

--- code start ---
/*   Example: learn_urlget -p 8080 -x my-proxy.my.site http://www.from.here 
 */
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <string.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <errno.h>

#define LEAST_SIZE_PROGRESS BUFSIZE
#define BUFSIZE (2048 * 5)

typedef enum {
    URG_OK = 0,
    URG_COULDNT_CONNECT,
    URG_COULDNT_RESOLVE_HOST
} UrgError;

/* config struct */
struct UrlData {
    FILE *out;  // the fetched file goes here
    FILE *in;   // the uploaded file is read from here
    char *url;  // what to get
    unsigned short port;  // which port to use

    // function that stores the output
    size_t (*fwrite) (char *buffer,
                      int size,
                      int nitems,
                      FILE *outstream);
    // function that reads the input
    size_t (*fread)(char *buffer,
                    int size,
                    int nitems,
                    FILE *outstream);
    long timeout;  // in seconds, 0 means no timeout
    // fields only set and used without _urlget()
    int firstsocket;    // the main socket to use
    int secondarysocket;// for i.e ftp transfers
    char buffer[BUFSIZE+1];
};

static void infof(struct UrlData *data, char *fmt, ...) {
    int verbose = 1;
    if (verbose)
        printf("verbose: ");
    fprintf(stderr, fmt);
}

#ifndef INADDR_NONE
#define INADDR_NONE -1
#endif
static struct hostent * GetHost(struct UrlData *data, char *hostname) {
    struct hostent *h = NULL;
    unsigned long in;

    if ( (in = inet_addr(hostname)) != INADDR_NONE) {
        if ( (h = gethostbyaddr((char *)&in, sizeof(in),
                        AF_INET)) == NULL) {
            infof(data, "gethostbyaddr(2) failed for %s\n", hostname);
        }
    } else if ( (h = gethostbyname(hostname)) == NULL) {
            infof(data, "gethostbyname(2) failed for %s\n", hostname);
    }
    return (h);
}


/* sendf() sends the str to the server */
static int sendf(int fd, struct UrlData *data, char *str) {
    char s[1024];

    printf("sending %s\n", s);
    return (send(fd, s, strlen(s), 0));
}

/* This is where a lot of the action happens */

static UrgError _urlget(struct UrlData *data) {
    struct hostent *he;
    struct hostent *hp = NULL;
    struct sockaddr_in serv_addr;
    char path[512]="/";
    char *buf;
    size_t nread;
    buf = data->buffer;
    // short circuit...
    int local = 1;
    int web = 1;
    char * name = "127.0.0.1";
    if (web)
        data->port = 80;

    data->url = "/";
    if (!(hp = GetHost(data, name))) {
        fprintf(stderr, "Could not resolve %s", name);
        return URG_COULDNT_RESOLVE_HOST;
    }

    data->firstsocket = socket(AF_INET, SOCK_STREAM, 0);
    memset((char*) &serv_addr, '\0', sizeof(serv_addr));
    memcpy((char*) &(serv_addr.sin_addr), 
            hp->h_addr, hp->h_length);
    serv_addr.sin_family = hp->h_addrtype;
    serv_addr.sin_port = htons(data->port);
    if (connect(data->firstsocket, 
                (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) {
        if (errno) {
            fprintf(stderr, "Could not connect to server\n");
            return URG_COULDNT_CONNECT;
        }
    }
        
    char *str = "hello";
    int ret = sendf(data->firstsocket, data, str);      
    //TODO: implement
    return ret;
}

void urlfree(struct UrlData *data) {
    if (-1 != data->secondarysocket)
        close(data->secondarysocket);
    if (-1 != data->firstsocket)
        close(data->firstsocket);
    free(data);
}

int main(int argc, char **argv) {
    char *str = "hello there";
    struct UrlData *data;
    int res;

    data = malloc(sizeof(struct UrlData));

    if (data) {
        memset(data, 0, sizeof(struct UrlData));
        // set some defaults...
        data->out = stdout;
        data->in = stdin;
        data->firstsocket = -1; // no file descriptor
        // use fwrite as default function to store output
        data->fwrite = (size_t (*)(char *, int, int, FILE *))fwrite;
        // use fread as default function to read input
        data->fread = (size_t (*)(char *, int, int, FILE *))fread;

    }
    res= _urlget(data);

    urlfree(data);
    return 0;
}

--- code end ---

> Next: work on main and passing something to sendf()
  in sendf(): must copy contents of *str to char s[1024] 

Sun Oct 22 21:30:46 EDT 2017
END

Mon Oct 23 08:02:55 EDT 2017
START

> gethost_test.c done to test GetHost()

--- code start ---

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <string.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <errno.h>

#ifndef INADDR_NONE
#define INADDR_NONE -1
#endif

static struct hostent * getHost(char *hostname) {
    struct hostent *h = NULL;
    unsigned long in;
    printf("in getHost\n");

    if ( (in = inet_addr(hostname)) != INADDR_NONE) {
        printf("inet_addr(hostname) != INADDR_NONE\n");
        if ( (h = gethostbyaddr((char *)&in, sizeof(in),
                        AF_INET)) == NULL) {
            //infof(data, "gethostbyaddr(2) failed for %s\n", hostname);
            fprintf(stderr, "gethostbyaddr(2) failed for %s\n", hostname);
        } else {
            printf("gethostbyaddr not NULL\n");
            //printf("h->h_name >>%s<<\n", h->h_name);
        }
    } else if ( (h = gethostbyname(hostname)) == NULL) {
            printf("gethostbyname(hostname) == NULL)\n");
            //infof(data, "gethostbyname(2) failed for %s\n", hostname);
            fprintf(stderr, "gethostbyname(2) failed for %s\n", hostname);
    }
    return (h);

}

int main(int argc, char **argv) {
    struct hostent *he; 
    char *hostname = "127.0.0.1";
    he = getHost(hostname);

    printf("getHost he->h_name returned >>%s<<\n", he->h_name);
    return 0;
}

--- code end ---

Mon Oct 23 08:39:11 EDT 2017
END

Mon Oct 23 16:36:46 EDT 2017
START

> Now, the above code did not have anything for he->h_addr or
  hp->h_addrtype and:

$ man gethostbyname

> The above man page says that gethostbyname() and gethostbyaddr()
  are both obsolete. Applications should use getaddrinfo(),
  getnameinfo() and gai_strerror() instead. So I looked around
  and searched the PDF copy of "Beej's Guide to Networking" for
  a quick code sample - btw, TCP/IP Illustrated looks more
  authoritative, but I needed a quick search...
  CTRL-s "getaddrinfo"

Mon Oct 23 16:55:46 EDT 2017
END

Tue Oct 24 08:05:24 EDT 2017
START

> THINGS I HAVE LEARNED SO FAR:

> using enum to create constants and make return types as the
  enum type, example:

typedef enum {
    URG_OK = 0,
    URG_COULDNT_CONNECT,
    URG_COULDNT_RESOLVE_HOST
} UrgError;

static UrgError _urlget(struct UrlData *data);

> _urlget() returns actually an int but the function itself
  returns only the constants in enum UrgError, hence the return
  type can be of UrgError which gives us a better idea what kind
  of value the function is supposed to return and it also does
  not need to "throw" an exception. Convenient!

> Structs with function pointers in them:

struct UrlData {
    FILE *out;  // the fetched file goes here
    FILE *in;   // the uploaded file is read from here
    char *url;  // what to get
    unsigned short port;  // which port to use

    // function that stores the output
    size_t (*fwrite) (char *buffer,
                      int size,
                      int nitems,
                      FILE *outstream);
    char buffer[BUFSIZE+1];
};

> Consider fwrite in this structure.

size_t (*fwrite) (char *buffer, int size, int nitems,
        FILE *outstream);

> It can be used this way:

  struct UrlData *data;
  data = malloc(sizeof(struct UrlData));
  if (data) {
    memset(data, 0, sizeof(struct UrlData));
    data->out = stdout; /* default output to stdout */
    data->in  = stdin;  /* default input from stdin */
    data->firstsocket = -1; /* no file descriptor */
    data->fwrite = (size_t (*)(char *, int, int, FILE *))fwrite;
  }

> Notice the last line before the brace, fwrite is casted to
  (size_t (*)(char *, int, int, FILE *)), which corresponds to
  the function signature of fwrite which is taken from man page,
  compare now man page description and the cast...

    size_t fwrite(void *ptr, size_t size, size_t nmemb,
                  FILE *stream)
    data->fwrite = (size_t (*)(char *, int, int, FILE *))fwrite;
    vs.

    data->fwrite = (size_t (*)(char *, int, int, FILE *))fwrite;

Tue Oct 24 08:25:23 EDT 2017
END

Wed Oct 25 19:26:06 EDT 2017
START

> Learning how to test in C with CppUTest. Got the idea from the sample content
  from "Test Driven Development for Embedded C"
  First the code (all of which are in c_me/testing

--- code start ---

/* file: first.c */

#include "first.h"

#ifndef CPPUTEST
int main(int argc, char *argv[])
{
    char* pa;
    char* pb;
    pa = (char*) malloc(sizeof(char) * 80);
    pb = (char*) malloc(sizeof(char) * 20);

    strcpy(pa, "abcdefg\0");
    strcpy(pb, "hijklmn\0");
        
    printf ("first Start......\n");
    
    ret_void();
    printf ("ret_int: %d\n", ret_int(100, 10));
    printf ("ret_double: %.2f\n", ret_double(100.0, 10.0));
    printf ("ret_pchar: %s\n", ret_pchar(pa, pb));

    struct Student* s = (struct Student*) malloc(sizeof(struct Student));
    s->name = (char*) malloc(sizeof(char) * 80);
    
    init_student(s, "test cpputest", 100);
    printf ("init_Student: name=%s, score=%d\n", s->name, s->score);
    printf ("first End  ......\n");
    free(pa);
    free(pb);
    free(s->name);
    free(s);
    
    return 0;
}
#endif

void ret_void()
{
    printf ("Hello CPPUTest!\n");
}

/* ia + ib */
int ret_int(int ia, int ib)
{
    return ia + ib;
}

/* da / db */
double ret_double(double da, double db)
{
    return da / db;
}

/* pa = pa + pb */
char* ret_pchar(char* pa, char* pb)
{
    return strcat(pa, pb);
}

/* s->name = name, s->score = score */
struct Student *init_student(struct Student* s, char* name, int score)
{
    strcpy(s->name, name);
    s->score = score;
    return s;
}
--- code end ---

> then we have the header file "first.h" which is still a c file.

--- code start ---

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct Student
{
    char* name;
    int score;
};

void ret_void(void);
int ret_int(int, int);
double ret_double(double, double);
char* ret_pchar(char*, char*);

struct Student* init_student(struct Student* s, char* name, int score);

--- code end ---

> Then the makefile:

--- code start ---
# makefile for "first" cpputest (note that we should use tabs here
CPPUTEST_HOME = /usr/local

CC      := gcc
CFLAGS    := -g -Wall
CFLAGS  += -std=c99
CFLAGS  += -D CPPUTEST            # Compile the test file, ignore the main function of first.c, the first.c code with the CPPUTEST macro

# CPPUTest is C++Write, so using g++ To compile the test file
CPP     := g++
CPPFLAGS  := -g -Wall
CPPFLAGS  += -I$(CPPUTEST_HOME)/include

LDFLAGS := -L$(CPPUTEST_HOME)/lib -lCppUTest


first: first.o

first.o: first.h first.c
	$(CC) -c -o first.o first.c $(CFLAGS)

# Additional compiled test program
test: test.o first.o
	$(CPP) -o $@ test.o first.o $(LDFLAGS)

test.o: first.h test.c
	$(CPP) -c -o test.o test.c $(CPPFLAGS)


.PHONY: clean
clean:
	@echo "clean..."
	rm -f test first
	rm -f first.o test.o
--- code end ---

> We almost forgot "test.c":

--- code start ---
/* file: test.c */

#include <CppUTest/CommandLineTestRunner.h>
#include <CppUTest/TestHarness.h>

extern "C"
{
#include "first.h"
}


/* The definition of a TEST_GROUP, the name is first */
TEST_GROUP(first)
{};

/* The definition of a belonging to the TEST_GROUP TEST, the name is ret_int_success */
TEST(first, ret_int_success)
{
    int sum = ret_int(1, 2);
    CHECK_EQUAL(sum, 3);
}

/* The definition of a belonging to the TEST_GROUP TEST, the name is ret_int_failed */
TEST(first, ret_int_failed)
{
    int sum = ret_int(1, 2);
    CHECK_EQUAL(sum, 4);
}

int main(int argc, char *argv[])
{
    CommandLineTestRunner::RunAllTests(argc, argv);
    return 0;
}
--- code end ---

> notice that we use extern "c" { #include "first.h" }

Wed Oct 25 19:58:52 EDT 2017
END

Fri Oct 27 23:38:25 EDT 2017
START

> Using Unity to test C code
  Files in c_me/testing/unity:
  This folder has unit.h unit.c and unity_internals.h

  TestDumbExample.c:

--- code start ---
/*
 * Compile with:
 * $ cc TestDumbExample.c DumbExample.c unity.c -o TestDumbExample
 */
#include "unity.h"
#include "DumbExample.h"

void test_AverageThreeBytes_should_AverageMidRangeValues(void) {
    TEST_ASSERT_EQUAL_HEX8(40, AverageThreeBytes(30, 40, 50));
    TEST_ASSERT_EQUAL_HEX8(40, AverageThreeBytes(10, 70, 40));
    TEST_ASSERT_EQUAL_HEX8(33, AverageThreeBytes(33, 33, 33));
}

int main() {
    UNITY_BEGIN();
    RUN_TEST(test_AverageThreeBytes_should_AverageMidRangeValues);
    return UNITY_END();
}
--- code end ---

> Code for DumbExample.c

--- code start ---
#include "DumbExample.h"

int8_t AverageThreeBytes(int8_t a, int8_t b, int8_t c) {
    return (int8_t)(((int16_t)a + (int16_t)b + (int16_t)c) / 3);
}
--- code end ---

> Code for DumbExample.h:
--- code start ---
#include <stdint.h>

int8_t AverageThreeBytes(int8_t a, int8_t b, int8_t c);
--- code end ---

> Compile with:

$ cc TestDumbExample.c DumbExample.c unity.c -o TestDumbExample

> Then run:

$ ./TestDumbExample

TestDumbExample.c:12:test_AverageThreeBytes_should_AverageMidRangeValues:PASS

-----------------------
1 Tests 0 Failures 0 Ignored
OK

Sat Oct 28 00:07:00 EDT 2017
END

Sat Oct 28 12:16:55 EDT 2017
START

> made a compile script named "compile"

$ vim compile
#!/bin/sh
cc LedDriverTest.c ../unity_fixture.c ../unity.c LedDriverTestRunner.c AllTests.c LedDriver.c -o test
$ chmod u+x compile

$ ./test

> Note that in AllTests.c, main is:

int main(int argc, const char * argv[])

> Note "const char * argv[]"

> Once you have AllTests.c and [project_name]TestRunner.c in
  place, when you add a test you do this:
  1. edit [project_name]Test.c:

TEST(TestGroup, TestFuncName) {
    ...
    TEST_ASSERT_EQUAL(a, b);
}
    2. edit [project_name]TestRunner.c:
TEST_GROUP_RUNNER(TestGroup) {
    RUN_TEST_CASE(TestGroup, TestFunc1);
    RUN_TEST_CASE(TestGroup, TestFuncName);
}
    3. Write stub for "FuncName" in [project_name].h
    4. Implement "FuncName" in [project_name].c

    5. compile, test

Sat Oct 28 12:58:43 EDT 2017
END


Sat Oct 28 18:40:09 EDT 2017
START

> Created a "barebones" project with tests in:
~/learning_from/test_scaffold

$ tree test_scaffold

test_scaffold
|-- LedDriver
|   |-- AllTests.c
|   |-- LedDriver.c
|   |-- LedDriver.h
|   |-- LedDriverTest.c
|   `-- LedDriverTestRunner.c
|-- libs
|   |-- unity.c
|   |-- unity_fixture.c
|   |-- unity_fixture.h
|   |-- unity_fixture_internals.h
|   |-- unity_fixture_malloc_overrides.h
|   |-- unity.h
|   `-- unity_internals.h
`-- run

Sat Oct 28 18:49:48 EDT 2017
END


Sun Oct 29 09:30:08 EDT 2017
START

> Now in README.txt

How to change names to your project's name.
- change test_scaffold directory to ProjectName.
- cd ProjectName
- mv LedDriver ProjectName
- mv LedDriver.c ProjectName.c
- mv LedDriver.h ProjectName.h
- mv LedDriverTest.c ProjectNameTest.c
- mv LedDriverTestRunner.c ProjectNameTestRunner.c
- change all instances of LedDriver in LedDriver.h to ProjectName
- change all instances of LedDriver in AllTests.c to ProjectName
- change all instances of LedDriver in LedDriver.c to ProjectName
- change all instances of LedDriver in LedDriverTest.c to ProjectName
- change all instances of LedDriver in LedDriverTestRunner.c to ProjectName
- cd ..
- change all instances of LedDriver in run to ProjectName 

Sun Oct 29 09:46:08 EDT 2017
END
