A PLAN...

Sun Nov  5 10:54:42 EST 2017
START

> This is how it is going:
  I have found out that I am more productive writing entries in a log like
  this. What is different with this logging is that I try to log as much as
  possible. Recording steps to do something which I might forget like how
  to find info, or what to download, how to install and then how to just
  incrementally "hack" at a code. Recording how I am learning and doing
  makes this endeavor more worthwhile.
  I have read and tinkered with sources from OSS and a couple of books 
  which is great.
  Also putting a timestamp (START and END) makes me go through the material
  much more quickly, gets me very focused and I've seen a lot of results.
  It forces me to learn from something as fast as I can and leaving less
  time to be to "idealistic". There is never a perfect start it seems, it
  always has been a lot of stumbles.
  It feels better to not be afraid to make mistakes...

Sun Nov  5 11:00:45 EST 2017
END

Sun Nov  5 11:01:04 EST 2017
START

> What to do next?
  IPC
  sockets?
  find how messaging is used in real world programs.

> going into zeromq code
  
$ cd src

> code is in C++. Hmm...
  It seems he wanted C too: http://250bpm.com/blog:4
  Now nanomsg is in C. Created by the same author of above.
  http://nanomsg.org/

> Getting stuck at zmq...

> http://hintjens.com/blog:112. Uhh
Sun Nov  5 11:17:29 EST 2017

> Downloaded nanomsg-1.0.0
$ unzip nanomsg-1.0.0
$ ./configure
$ make
$ cd src

> The code is formatted like this xxx_xxx_xxxx().
  I looked at the list implementation and then the core dir. It looks good
  but I cannot get my head around it. Definitely something to read later
  on?

Sun Nov  5 11:32:17 EST 2017

> back to redis
$ cd src
$ grep -R "struct client"

> blowing my mind...
  Time to get my dog for a walk.
> I have my mind set on the redis implementation.

Sun Nov  5 11:36:47 EST 2017
END

Tue Nov  7 20:25:23 EST 2017
START

> http://buildyourownlisp.com/chapter4_interactive_prompt

--- code start ---

/* interactive.c
 * compile: cc -std=c99 -Wall interactive.c -ledit -o interactive
 */
#include <stdio.h>
#include <stdlib.h>
#include <editline/readline.h>
#include <histedit.h>
//#include <editline/history.h>
// declare a buffer for input
//static char input[2048];

int main(int argc, char **argv) {
    // Print version and exit information
    puts("Lispy Version 0.0.0.0.1");
    puts("Press Ctrl+c to Exit\n");

    while (1) {
        /*
        fputs("lispy> ", stdout);
        fgets(input, 2048, stdin);
        */
        char* input = readline("lispy> ");
        add_history(input);
        printf("No you're a %s\n", input);
        free(input);
    }
    return 0;
}

--- code end ---

Tue Nov  7 20:44:29 EST 2017
END

Wed Nov  8 07:34:41 EST 2017
START

> In listTesRunner.c
    RUN_TEST_CASE(List, ListRewindGetsFirstNode);

> In list.c:

listNode * listNext(listIter *iter) {

}

void listRewind(list *aList, listIter *li) {
    
}

> In listTest.c

TEST(List, ListRewindGetsFirstNode) {
    aNode = listNext(&li);
    TEST_ASSERT_EQUAL("one", aNode->value);
    aNode = listNext(&li);
    TEST_ASSERT_EQUAL(NULL, aNode);
}

/* from list.c */
void listRewind(list *aList, listIter *li) {
    li->next = aList->head;
}

listNode * listNext(listIter *iter) {
    listNode *current = iter->next;
    if (current != NULL) { iter->next = current->next; }
    return current;
}

--- code end ---

Wed Nov  8 07:50:46 EST 2017
END

Wed Nov  8 21:48:17 EST 2017
START

> Working on listTest.c...

Wed Nov  8 22:18:17 EST 2017
END

Sun Nov 12 12:25:07 EST 2017
START

> did more for listTest.c
  Now tested for listRewind and listNext(listIter *i)

--- code start ---
/* from listTest.c */
TEST(List, ListNextAfterLast) {
    list *aList = listCreate();
    listNode *aNode;
    listIter li; 
    listAddNodeHead(aList, "one"); 
    listAddNodeHead(aList, "two"); 
    listRewind(aList, &li);
    aNode = listNext(&li);
    TEST_ASSERT_EQUAL("one", aNode->value);
}

Sun Nov 12 12:40:12 EST 2017
END


Sun Nov 12 15:41:06 EST 2017
START

> First choose what to do...

  I'll test some Stanford samples...

$ cd c_cyg/algo/stanford

Sun Nov 12 16:01:12 EST 2017
 
> Just got the test running..

> Test runs but "illegal instruction"

Sun Nov 12 16:12:59 EST 2017
END

Wed Nov 15 20:22:38 EST 2017
START

> This is what I coded so far in Java for processing an html page and
  extracting data. I downloaded and used the Community edition of Intellij
  Idea. Used presentation, full-screen and distraction free modes. What a
  breeze and pleasure to code in. Now for the code:

--- code start ---
// com/baloi/Main.java

package com.baloi.mds;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

import static java.lang.System.out;
import static com.baloi.mds.MDSUtil.extractDate;
import static com.baloi.mds.MDSUtil.extractName;


class MDSList {
    private ArrayList<MDSBook> mdsBooks;
    private ArrayList<String> dataList;

    MDSList(ArrayList<String> dataList) {
        this.dataList = dataList;
        createBooksFromData(dataList);
    }

    private void createBooksFromData(ArrayList<String> dataList) {
        Iterator iterator = dataList.iterator();
        String data;
        String date;
        Patient patient;
        while (iterator.hasNext()) {
            data = (String) iterator.next();
            if (MDSUtil.lineHasDate(data) && MDSUtil.lineHasName(data)) {
                //out.println("ok");
                date = extractDate(data);
                patient = extractPatient(data);
                MDSBook book = new MDSBook(date, patient);
            }
        }
    }

    private Patient extractPatient(String data) {
        String lastName = extractLastName(data);
        String firstName = extractFirstName(data);
        return new Patient(lastName, firstName);
    }

    private String extractLastName(String data) {
        //TODO: implement
        return "";
    }

    private String extractFirstName(String data) {
        //TODO: implement
        return "";
    }

    void print() {
        Iterator iterator = dataList.iterator();
        String aLine;
        while (iterator.hasNext()) {
            aLine = (String) iterator.next();
            if (MDSUtil.lineHasDate(aLine)) {
                //out.println(aLine);
                out.print(extractDate(aLine) + " - ");
                out.println(extractName(aLine));
            }
        }
    }
}

class MDSServer {
    void run() {
        out.println("Running server on port 8888");
    }
}

class MDSUtil {
    static String extractDate(String data) {
        int startIndex;
        String date;

        if (data.contains("2017")) {
            startIndex = data.indexOf("2017");
            date = data.substring(startIndex-6, startIndex+4);

            return date;
        }
        else return " ";
    }

    static String extractName(String data) {
        int startIndex;
        String name;

        if (data.contains(MDSVals.NAME_MARKER)) {
            startIndex = data.indexOf(MDSVals.NAME_MARKER);
            name = data.substring(startIndex+15, startIndex+50);
            return name;
        }
        else return " ";
    }
    static boolean lineHasDate(String line) { return line.contains("/2017"); }
    static boolean lineHasName(String line) { return line.contains(MDSVals.NAME_MARKER); }
}
class MDSVals {
    static final String NAME_MARKER = "ESOLtabtype=C";
}
class Patient {
    private String firstName;
    private String lastName;

    Patient(String lastName, String firstName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
}

class MDSBook {
    private String date;
    private Patient patient;

    MDSBook(String date, Patient patient) {
        this.date = date;
        this.patient = patient;
    }
}

class MDSFileReader {

    static ArrayList<String> readDataFromFile(String filename) throws IOException {
        FileReader fileReader = new FileReader(filename);
        ArrayList<String> lines = new ArrayList<>();
        String line;

        BufferedReader reader = new BufferedReader(fileReader);

        while ((line = reader.readLine()) != null) {
            if (MDSUtil.lineHasDate(line)) {
                lines.add(line);
            }
        }

        reader.close();

        return lines;
    }


}

public class Main {
    public static void main(String[] args) {
        String filename = "~/IdeaProjects/mds/src/Clinical - MDS Portal.html";
        ArrayList<String> dataList = null;

        try {
            dataList = MDSFileReader.readDataFromFile(filename);
        } catch (IOException ioe) {
            out.println("Error reading " + filename);
            ioe.printStackTrace();
        }

        out.println("--- Iterating through the list ---");

        MDSList mdsList = new MDSList(dataList);
        mdsList.print();
        MDSServer mdsServer = new MDSServer();
        mdsServer.run();
        out.println("--- main done. ---");
    }
}
--- code end ---

> About 160 lines or so. Intellisense and other things like doing Alt-Enter for imports or other
  suggestions, Alt-u u for build and run. And just the distraction free UI. Well, I got sold when the
  editor bindings were in Vim! Sold!

> I had to reset git:
 
$ git reset --hard 23837afc5db5179dee6527d3a83e9cb2a98997a6

Wed Nov 15 20:41:51 EST 2017
END

Thu Nov 16 23:29:55 EST 2017
START

> Now I have put the file name to open in a config file, making main() this:

--- code start ---

public class Main {
    public static void main(String[] args) {
        Properties properties = new Properties();
        InputStream input = null;

        String filename;
        ArrayList<String> dataList = null;

        try {
            input = new FileInputStream("/home/baloi/IdeaProjects/mds/src/config.properties");
            properties.load(input);
            out.println("filename = " + properties.getProperty("filename"));
            filename = properties.getProperty("filename");
            dataList = MDSFileReader.readDataFromFile(filename);
        } catch (IOException ioe) {
            out.println("Error reading file");
            ioe.printStackTrace();
        }

        out.println("--- Iterating through the list ---");

        MDSList mdsList = new MDSList(dataList);
        mdsList.print();
        MDSServer mdsServer = new MDSServer();
        mdsServer.run();
        out.println("--- main done. ---");
    }
}
--- code end ---

> And now have taken care of the extra character '>' on some of the dates:

--- code start ---
            if (date.startsWith(">")) {
                date = date.substring(1);
            }
--- code end ---

Thu Nov 16 23:50:55 EST 2017
END

Sun Nov 19 22:47:45 EST 2017
START

> I have been programming in Go since yesterday. Downloaded GoLand EAP. It
  is basically IntelliJ with Go support. Very nice. Got the Vim plugin to
  run so the editor uses Vim bindings. I have got to say: editing code
  using an IDE like GoLand makes me much more productive at the start.
  Things I like:
  - Fullscreen in presentation and distraction free modes
  - Vim bindings
  - Alt-u u to run
  - refactoring easy (it is much easier to import packages and makes you
    less afraid to create and organize your code in coherent packages
  - looks very nice.

  The only thing is it not free.

Sun Nov 19 23:07:45 EST 2017
END
